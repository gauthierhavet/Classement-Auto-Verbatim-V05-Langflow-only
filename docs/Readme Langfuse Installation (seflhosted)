# Run Langfuse Locally
This guide will walk you through the steps to run Langfuse locally via docker compose. We will use the docker-compose.yml file. This is the simplest way to run Langfuse to give it a try.

For high-availability and high-throughput, we recommend using Kubernetes (deployment guide). The docker compose setup lacks high-availability, scaling capabilities, and backup functionality.

Walkthrough
Watch this 2:15 minute walkthrough for a step-by-step guide on running Langfuse locally with Docker Compose.


## Get Started
Requirements:

git
docker & docker compose -> use Docker Desktop on Mac or Windows
Clone Langfuse Repository
Get a copy of the latest Langfuse repository:

git clone https://github.com/langfuse/langfuse.git
cd langfuse

## Start the application
Run the langfuse docker compose

docker compose up

Watch the containers being started and the logs flowing in. After about 2-3 minutes, the langfuse-web-1 container should log “Ready”. At this point you can proceed to the next step.

Done
And you are ready to go! Open http://localhost:3000 in your browser to access the Langfuse UI.

## Features
Langfuse supports many configuration options and self-hosted features. For more details, please refer to the configuration guide.

Authentication & SSO
Encryption
Headless Initialization
Networking
Organization Creators
UI Customization
Shutdown
You can stop the containers by hitting Ctrl+C in the terminal.

If you started docker-compose in the background (-d flag), you can stop all instance using:

docker compose down

Adding the -v flag will also remove the volumes.

## How to Upgrade
To upgrade Langfuse, you can stop the containers and run docker compose up --pull always.

For more details on upgrading, please refer to the upgrade guide.

# Docker Compose

This guide will walk you through deploying Langfuse on a VM using Docker Compose. We will use the docker-compose.yml file.

If you use a cloud provider like AWS, GCP, or Azure, you will need permissions to deploy virtual machines.

For high-availability and high-throughput, we recommend using Kubernetes (deployment guide). The docker compose setup lacks high-availability, scaling capabilities, and backup functionality.

Coming from docker-compose v2? See our upgrade guide for docker compose.

## Get Started
Start a new instance and SSH into it
Enter your cloud provider interface and navigate to the VM instance section. This is EC2 on AWS, Compute Engine on GCP, and Virtual Machines on Azure. Create a new instance.

We recommend that you use at least 4 cores and 16 GiB of memory, e.g. a t3.xlarge on AWS. Assign a public IP address in case you want to send traces from external sources. As observability data tends to be large in volume, choose a sufficient amount of storage, e.g. 100GiB.

The rest of this guide will assume that you have an Ubuntu OS running on your VM and are connected via SSH.

Install Docker and Docker Compose
Install docker (see official guide as well). Setup Docker’s apt repository:

## Add Docker's official GPG key:
sudo apt-get update
sudo apt-get install ca-certificates curl
sudo install -m 0755 -d /etc/apt/keyrings
sudo curl -fsSL https://download.docker.com/linux/ubuntu/gpg -o /etc/apt/keyrings/docker.asc
sudo chmod a+r /etc/apt/keyrings/docker.asc
 
## Add the repository to Apt sources:
echo \
  "deb [arch=$(dpkg --print-architecture) signed-by=/etc/apt/keyrings/docker.asc] https://download.docker.com/linux/ubuntu \
  $(. /etc/os-release && echo "$VERSION_CODENAME") stable" | \
  sudo tee /etc/apt/sources.list.d/docker.list > /dev/null
sudo apt-get update

## Install Docker packages:

sudo apt-get install docker-ce docker-ce-cli containerd.io docker-buildx-plugin docker-compose-plugin

Verify installation:

sudo docker run hello-world

Clone Langfuse Repository
Get a copy of the latest Langfuse repository:

git clone https://github.com/langfuse/langfuse.git
 
cd langfuse

## Update Secrets
For testing purposes, the pre-configured variables in the docker-compose file are usually sufficient. Feel free to skip this step.

If you send any kind of sensitive data to the application or intend to keep it up for longer, we recommend that you modify the docker-compose file and overwrite the following environment variables:

SALT: A random string used to hash passwords. It should be at least 32 characters long.
ENCRYPTION_KEY: Generate this via openssl rand -hex 32.
NEXTAUTH_SECRET: A random string used to sign JWT tokens (Generate this via openssl rand -base64 32).
NEXTAUTH_URL: The URL where the application is hosted. Used for redirects after signup.
In addition, you can change the database and storage credentials to be more secure.

Start the application
docker compose up

Watch the containers being started and the logs flowing in. After about 2-3 minutes, the langfuse-web-1 container should log “Ready”. At this point you can proceed to the next step.

Done
And you are ready to go! Open http://<instance-ip>:3000 in your browser to access the Langfuse UI.

Depending on your configuration, you might need to open an SSH tunnel to your VM to access the IP. Please refer to your cloud provider’s documentation for how to do this.

## Features
Langfuse supports many configuration options and self-hosted features. For more details, please refer to the configuration guide.

Authentication & SSO
Encryption
Headless Initialization
Networking
Organization Creators
UI Customization
Scaling
Docker compose does not support horizontal scaling without an additional Load Balancer component. We recommend to use one of the other deployment options if your load exceeds single-instance scale or requires high availability. To add more throughput on a docker compose setup, you can usually use a larger virtual machine, i.e. scale vertically.

## Shutdown
You can stop the containers by hitting Ctrl+C in the terminal. If you started docker-compose in the background (-d flag), you can stop all instance using:

docker compose down

Adding the -v flag will also remove the volumes.

Ensure to stop the VM instance in your cloud provider interface to avoid unnecessary costs.

## Troubleshooting
Multimodal tracing is not working: This docker compose setup by default uses MinIO for blob storage which is not accessible from outside the Docker network for direct uploads. Please refer to the blob storage guide for more details on how to configure MinIO for media uploads.
How to Upgrade
To upgrade Langfuse, you can stop the containers and run docker compose up --pull always.

For more details on upgrading, please refer to the upgrade guide.

# Docker
Deploy the application container to your infrastructure. You can use managed services like AWS ECS, Azure Container Instances, or GCP Cloud Run, or host it yourself.

During the container startup, all database migrations will be applied automatically. This can be optionally disabled via environment variables.

Before running Langfuse, please familiarize yourself with the architecture.

Please follow one of the deployment guides to run Langfuse locally, on a VM (docker-compose), or in Kubernetes (helm).

# Run Langfuse Web
docker run --name langfuse-web \
  -e DATABASE_URL=postgresql://hello \
  -e NEXTAUTH_URL=http://localhost:3000 \
  -e NEXTAUTH_SECRET=mysecret \
  -e SALT=mysalt \
  -e ENCRYPTION_KEY=0000000000000000000000000000000000000000000000000000000000000000 \ # generate via: openssl rand -hex 32
  -e CLICKHOUSE_URL=http://clickhouse:8123 \
  -e CLICKHOUSE_USER=clickhouse \
  -e CLICKHOUSE_PASSWORD=clickhouse \
  -e CLICKHOUSE_MIGRATION_URL=clickhouse://clickhouse:9000 \
  -e REDIS_HOST=localhost \
  -e REDIS_PORT=6379 \
  -e REDIS_AUTH=redis \
  -e LANGFUSE_S3_EVENT_UPLOAD_BUCKET=my-bucket \
  -e LANGFUSE_S3_EVENT_UPLOAD_REGION=us-east-1 \
  -e LANGFUSE_S3_EVENT_UPLOAD_ACCESS_KEY_ID=AKIAIOSFODNN7EXAMPLE \
  -e LANGFUSE_S3_EVENT_UPLOAD_SECRET_ACCESS_KEY=bPxRfiCYEXAMPLEKEY \
  -p 3000:3000 \
  -a STDOUT \
langfuse/langfuse:3

# Run Langfuse Worker
docker run --name langfuse-worker \
  -e DATABASE_URL=postgresql://hello \
  -e SALT=mysalt \
  -e ENCRYPTION_KEY=0000000000000000000000000000000000000000000000000000000000000000 \ # generate via: openssl rand -hex 32
  -e CLICKHOUSE_URL=http://clickhouse:8123 \
  -e CLICKHOUSE_USER=clickhouse \
  -e CLICKHOUSE_PASSWORD=clickhouse \
  -e REDIS_HOST=localhost \
  -e REDIS_PORT=6379 \
  -e REDIS_AUTH=redis \
  -e LANGFUSE_S3_EVENT_UPLOAD_BUCKET=my-bucket \
  -e LANGFUSE_S3_EVENT_UPLOAD_REGION=us-east-1 \
  -e LANGFUSE_S3_EVENT_UPLOAD_ACCESS_KEY_ID=AKIAIOSFODNN7EXAMPLE \
  -e LANGFUSE_S3_EVENT_UPLOAD_SECRET_ACCESS_KEY=bPxRfiCYEXAMPLEKEY \
  -p 3030:3030 \
  -a STDOUT \
langfuse/langfuse-worker:3
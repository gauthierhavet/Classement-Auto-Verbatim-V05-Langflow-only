Docker
Docker, an indispensable tool in modern software development, offers a compelling solution for AutoGen's setup. Docker allows you to create consistent environments that are portable and isolated from the host OS. With Docker, everything AutoGen needs to run, from the operating system to specific libraries, is encapsulated in a container, ensuring uniform functionality across different systems. The Dockerfiles necessary for AutoGen are conveniently located in the project's GitHub repository at https://github.com/microsoft/autogen/tree/main/.devcontainer.

Pre-configured DockerFiles: The AutoGen Project offers pre-configured Dockerfiles for your use. These Dockerfiles will run as is, however they can be modified to suit your development needs. Please see the README.md file in autogen/.devcontainer

autogen_base_img: For a basic setup, you can use the autogen_base_img to run simple scripts or applications. This is ideal for general users or those new to AutoGen.
autogen_full_img: Advanced users or those requiring more features can use autogen_full_img. Be aware that this version loads ALL THE THINGS and thus is very large. Take this into consideration if you build your application off of it.
Step 1: Install Docker
General Installation: Follow the official Docker installation instructions. This is your first step towards a containerized environment, ensuring a consistent and isolated workspace for AutoGen.

For Mac Users: If you encounter issues with the Docker daemon, consider using colima. Colima offers a lightweight alternative to manage Docker containers efficiently on macOS.

Step 2: Build a Docker Image
AutoGen now provides updated Dockerfiles tailored for different needs. Building a Docker image is akin to setting the foundation for your project's environment:

Autogen Basic: Ideal for general use, this setup includes common Python libraries and essential dependencies. Perfect for those just starting with AutoGen.

docker build -f .devcontainer/Dockerfile -t autogen_base_img https://github.com/microsoft/autogen.git#main


Autogen Advanced: Advanced users or those requiring all the things that AutoGen has to offer autogen_full_img

docker build -f .devcontainer/full/Dockerfile -t autogen_full_img https://github.com/microsoft/autogen.git#main


Step 3: Run AutoGen Applications from Docker Image
Here's how you can run an application built with AutoGen, using the Docker image:

Mount Your Directory: Use the Docker -v flag to mount your local application directory to the Docker container. This allows you to develop on your local machine while running the code in a consistent Docker environment. For example:

docker run -it -v $(pwd)/myapp:/home/autogen/autogen/myapp autogen_base_img:latest python /home/autogen/autogen/myapp/main.py


Here, $(pwd)/myapp is your local directory, and /home/autogen/autogen/myapp is the path in the Docker container where your code will be located.

Mount your code: Now suppose you have your application built with AutoGen in a main script named twoagent.py (example) in a folder named myapp. With the command line below, you can mount your folder and run the application in Docker.

# Mount the local folder `myapp` into docker image and run the script named "twoagent.py" in the docker.
docker run -it -v `pwd`/myapp:/myapp autogen_img:latest python /myapp/main_twoagent.py


Port Mapping: If your application requires a specific port, use the -p flag to map the container's port to your host. For instance, if your app runs on port 3000 inside Docker and you want it accessible on port 8080 on your host machine:

docker run -it -p 8080:3000 -v $(pwd)/myapp:/myapp autogen_base_img:latest python /myapp


In this command, -p 8080:3000 maps port 3000 from the container to port 8080 on your local machine.

Examples of Running Different Applications: Here is the basic format of the docker run command.

docker run -it -p {WorkstationPortNum}:{DockerPortNum} -v {WorkStation_Dir}:{Docker_DIR} {name_of_the_image} {bash/python} {Docker_path_to_script_to_execute}


Simple Script: Run a Python script located in your local myapp directory.

docker run -it -v `pwd`/myapp:/myapp autogen_base_img:latest python /myapp/my_script.py


Web Application: If your application includes a web server running on port 5000.

docker run -it -p 8080:5000 -v $(pwd)/myapp:/myapp autogen_base_img:latest

Data Processing: For tasks that involve processing data stored in a local directory.

docker run -it -v $(pwd)/data:/data autogen_base_img:latest python /myapp/process_data.py

------

Dockerfiles and Devcontainer Configurations for AutoGen
Welcome to the .devcontainer directory! Here you'll find Dockerfiles and devcontainer configurations that are essential for setting up your AutoGen development environment. Each Dockerfile is tailored for different use cases and requirements. Below is a brief overview of each and how you can utilize them effectively.

These configurations can be used with Codespaces and locally.

Dockerfile Descriptions
base
Purpose: This Dockerfile, i.e., ./Dockerfile, is designed for basic setups. It includes common Python libraries and essential dependencies required for general usage of AutoGen.
Usage: Ideal for those just starting with AutoGen or for general-purpose applications.
Building the Image: Run docker build -f ./Dockerfile -t autogen_base_img . in this directory.
Using with Codespaces: Code > Codespaces > Click on + By default + creates a Codespace on the current branch.
full
Purpose: This Dockerfile, i.e., ./full/Dockerfile is for advanced features. It includes additional dependencies and is configured for more complex or feature-rich AutoGen applications.
Usage: Suited for advanced users who need the full range of AutoGen's capabilities.
Building the Image: Execute docker build -f full/Dockerfile -t autogen_full_img ..
Using with Codespaces: Code > Codespaces > Click on ...> New with options > Choose "full" as devcontainer configuration. This image may require a Codespace with at least 64GB of disk space.
dev
Purpose: Tailored for AutoGen project developers, this Dockerfile, i.e., ./dev/Dockerfile includes tools and configurations aiding in development and contribution.
Usage: Recommended for developers who are contributing to the AutoGen project.
Building the Image: Run docker build -f dev/Dockerfile -t autogen_dev_img ..
Using with Codespaces: Code > Codespaces > Click on ...> New with options > Choose "dev" as devcontainer configuration. This image may require a Codespace with at least 64GB of disk space.
Before using: We highly encourage all potential contributors to read the AutoGen Contributing page prior to submitting any pull requests.
studio
Purpose: Tailored for AutoGen project developers, this Dockerfile, i.e., ./studio/Dockerfile, includes tools and configurations aiding in development and contribution.
Usage: Recommended for developers who are contributing to the AutoGen project.
Building the Image: Run docker build -f studio/Dockerfile -t autogen_studio_img ..
Using with Codespaces: Code > Codespaces > Click on ...> New with options > Choose "studio" as devcontainer configuration.
Before using: We highly encourage all potential contributors to read the AutoGen Contributing page prior to submitting any pull requests.
Customizing Dockerfiles
Feel free to modify these Dockerfiles for your specific project needs. Here are some common customizations:

Adding New Dependencies: If your project requires additional Python packages, you can add them using the RUN pip install command.

Changing the Base Image: You may change the base image (e.g., from a Python image to an Ubuntu image) to suit your project's requirements.

Changing the Python version: do you need a different version of python other than 3.11. Just update the first line of each of the Dockerfiles like so: FROM python:3.11-slim-bookworm to FROM python:3.10-slim-bookworm

Setting Environment Variables: Add environment variables using the ENV command for any application-specific configurations. We have prestaged the line needed to inject your OpenAI_key into the docker environment as a environmental variable. Others can be staged in the same way. Just uncomment the line. # ENV OPENAI_API_KEY="{OpenAI-API-Key}" to ENV OPENAI_API_KEY="{OpenAI-API-Key}"

Need a less "Advanced" Autogen build: If the ./full/Dockerfile is to much but you need more than advanced then update this line in the Dockerfile file. RUN pip install autogen-agentchat[teachable,lmm,retrievechat,mathchat,blendsearch]~=0.2 autogenra to install just what you need. RUN pip install autogen-agentchat[retrievechat,blendsearch]~=0.2 autogenra

Can't Dev without your favorite CLI tool: if you need particular OS tools to be installed in your Docker container you can add those packages here right after the sudo for the ./base/Dockerfile and ./full/Dockerfile files. In the example below we are installing net-tools and vim to the environment.

RUN apt-get update \
    && DEBIAN_FRONTEND=noninteractive apt-get install -y --no-install-recommends \
        software-properties-common sudo net-tools vim\
    && apt-get clean \
    && rm -rf /var/lib/apt/lists/*
Managing Your Docker Environment
After customizing your Dockerfile, build the Docker image using the docker build command as shown above. To run a container based on your new image, use:

docker run -it -v $(pwd)/your_app:/app your_image_name
Replace your_app with your application directory and your_image_name with the name of the image you built.

Closing for the Day
Exit the container: Type exit.
Stop the container: Use docker stop {application_project_name}.
Resuming Work
Restart the container: Use docker start {application_project_name}.
Access the container: Execute sudo docker exec -it {application_project_name} bash.
Reactivate the environment: Run source /usr/src/app/autogen_env/bin/activate.
Useful Docker Commands
View running containers: docker ps -a.
View Docker images: docker images.
Restart container setup: Stop (docker stop my_container), remove the container (docker rm my_container), and remove the image (docker rmi my_image:latest).
Troubleshooting Common Issues
Check Docker daemon, port conflicts, and permissions issues.